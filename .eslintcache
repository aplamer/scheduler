[{"C:\\Users\\PROX\\scheduler\\src\\index.js":"1","C:\\Users\\PROX\\scheduler\\src\\reportWebVitals.js":"2","C:\\Users\\PROX\\scheduler\\src\\containers\\App.js":"3","C:\\Users\\PROX\\scheduler\\src\\components\\Time\\Time.js":"4","C:\\Users\\PROX\\scheduler\\src\\containers\\TimeInputContainer\\TimeInputContainer.js":"5","C:\\Users\\PROX\\scheduler\\src\\components\\TimeInput\\PrevInputs\\PrevInputs.js":"6","C:\\Users\\PROX\\scheduler\\src\\components\\TimeInput\\Inputs\\Inputs.js":"7","C:\\Users\\PROX\\scheduler\\src\\components\\TimeInput\\Date\\Date.js":"8","C:\\Users\\PROX\\scheduler\\src\\components\\Score\\Score.js":"9","C:\\Users\\PROX\\scheduler\\src\\components\\Tips\\Tips.js":"10","C:\\Users\\PROX\\scheduler\\src\\components\\TimeInput\\Inputs\\Input\\Input.js":"11","C:\\Users\\PROX\\scheduler\\src\\store\\reducer.js":"12","C:\\Users\\PROX\\scheduler\\src\\components\\UI\\Backdrop\\Backdrop.js":"13","C:\\Users\\PROX\\scheduler\\src\\hoc\\Auxiliary\\Auxiliary.js":"14","C:\\Users\\PROX\\scheduler\\src\\containers\\Header\\Header.js":"15","C:\\Users\\PROX\\scheduler\\src\\containers\\Home\\Home.js":"16","C:\\Users\\PROX\\scheduler\\src\\containers\\History\\History.js":"17","C:\\Users\\PROX\\scheduler\\src\\containers\\About\\About.js":"18","C:\\Users\\PROX\\scheduler\\src\\containers\\Settings\\Settings.js":"19","C:\\Users\\PROX\\scheduler\\src\\containers\\CurrentTime\\CurrentTime.js":"20","C:\\Users\\PROX\\scheduler\\src\\containers\\Login\\Login.js":"21"},{"size":741,"mtime":1612056846788,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":1121,"mtime":1612548031366,"results":"25","hashOfConfig":"23"},{"size":632,"mtime":1612219496035,"results":"26","hashOfConfig":"23"},{"size":620,"mtime":1608769280119,"results":"27","hashOfConfig":"23"},{"size":1483,"mtime":1612056846745,"results":"28","hashOfConfig":"23"},{"size":4613,"mtime":1612056846736,"results":"29","hashOfConfig":"23"},{"size":141,"mtime":1608767206926,"results":"30","hashOfConfig":"23"},{"size":645,"mtime":1612209469611,"results":"31","hashOfConfig":"23"},{"size":371,"mtime":1608769174078,"results":"32","hashOfConfig":"23"},{"size":2152,"mtime":1612056846736,"results":"33","hashOfConfig":"23"},{"size":9944,"mtime":1612545610054,"results":"34","hashOfConfig":"23"},{"size":242,"mtime":1612056846750,"results":"35","hashOfConfig":"23"},{"size":61,"mtime":1612056846783,"results":"36","hashOfConfig":"23"},{"size":2374,"mtime":1612548141038,"results":"37","hashOfConfig":"23"},{"size":500,"mtime":1612547956807,"results":"38","hashOfConfig":"23"},{"size":2675,"mtime":1612547881121,"results":"39","hashOfConfig":"23"},{"size":1283,"mtime":1612547885612,"results":"40","hashOfConfig":"23"},{"size":1690,"mtime":1612547910797,"results":"41","hashOfConfig":"23"},{"size":4083,"mtime":1612219947592,"results":"42","hashOfConfig":"23"},{"size":6140,"mtime":1612548390146,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"jfwkyl",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\PROX\\scheduler\\src\\index.js",[],["88","89"],"C:\\Users\\PROX\\scheduler\\src\\reportWebVitals.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\App.js",[],"C:\\Users\\PROX\\scheduler\\src\\components\\Time\\Time.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\TimeInputContainer\\TimeInputContainer.js",[],"C:\\Users\\PROX\\scheduler\\src\\components\\TimeInput\\PrevInputs\\PrevInputs.js",[],"C:\\Users\\PROX\\scheduler\\src\\components\\TimeInput\\Inputs\\Inputs.js",[],"C:\\Users\\PROX\\scheduler\\src\\components\\TimeInput\\Date\\Date.js",[],"C:\\Users\\PROX\\scheduler\\src\\components\\Score\\Score.js",[],"C:\\Users\\PROX\\scheduler\\src\\components\\Tips\\Tips.js",[],"C:\\Users\\PROX\\scheduler\\src\\components\\TimeInput\\Inputs\\Input\\Input.js",[],"C:\\Users\\PROX\\scheduler\\src\\store\\reducer.js",["90"],"\r\nimport {std} from 'mathjs'\r\nconst initialState = {\r\n    sleepScore: \"N/A\",\r\n    timeSettings: \"Regular\",\r\n    dateSettings: \"MDY\",\r\n    Times: [\r\n        {\r\n            id: \"-1\",\r\n            sleepTime: \"N/A\",\r\n            wakeTime: \"N/A\",\r\n            totalHours: \"N/A\"\r\n        },\r\n        {\r\n            id: \"-1\",\r\n            sleepTime: \"N/A\",\r\n            wakeTime: \"N/A\",\r\n            totalHours: \"N/A\"\r\n        },\r\n        {\r\n            id: \"-1\",\r\n            sleepTime: \"N/A\",\r\n            wakeTime: \"N/A\",\r\n            totalHours: \"N/A\"\r\n        },\r\n        {\r\n            id: \"-1\",\r\n            sleepTime: \"N/A\",\r\n            wakeTime: \"N/A\",\r\n            totalHours: \"N/A\"\r\n        },\r\n        {\r\n            id: \"-1\",\r\n            sleepTime: \"N/A\",\r\n            wakeTime: \"N/A\",\r\n            totalHours: \"N/A\"\r\n        },\r\n        {\r\n            id: \"-1\",\r\n            sleepTime: \"N/A\",\r\n            wakeTime: \"N/A\",\r\n            totalHours: \"N/A\"\r\n        },\r\n        {\r\n            id: \"-1\",\r\n            sleepTime: \"N/A\",\r\n            wakeTime: \"N/A\",\r\n            totalHours: \"N/A\"\r\n        }\r\n    ]\r\n    /*sleepTime is an array filled with objects\r\n    each object has an id key (which is given as the time which the data was entered)\r\n    a sleeptime, and a wakeup time. The Times array only stores up to a week worths of data and slots in\r\n    the latest date into the 0 index (and the last date in the 7th index assuming the array is full).\r\n    */\r\n   ,\r\n   token: null,\r\n   userId: null,\r\n   error: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\nconst leadingZeroHandler = (time) => {\r\n    if(time < 10){\r\n        time = \"000\" + time.toString()\r\n    }\r\n    else if(time < 100){\r\n        time = \"00\" + time.toString()\r\n    }\r\n    else if(time < 1000){\r\n        time = \"0\" + time.toString()\r\n    }\r\n    else{\r\n        time = time.toString()\r\n    }\r\n    return time\r\n}\r\n\r\nconst splittingTime = (time) => {\r\n    return time.slice(0,2) + time.slice(3,5)\r\n}\r\n\r\nconst militaryToRegularHandler = (time) => {\r\n    let tempTimeValue = splittingTime(time)\r\n    let AMorPM = \"AM\"\r\n\r\n    tempTimeValue = parseInt(tempTimeValue)\r\n\r\n    if(tempTimeValue >= 1200 && tempTimeValue <= 1259){\r\n        AMorPM = \"PM\"\r\n    }\r\n    else if (tempTimeValue > 1259 && tempTimeValue < 2400){\r\n        AMorPM = \"PM\"\r\n        tempTimeValue -= 1200\r\n    }\r\n    else if (tempTimeValue >= 0 && tempTimeValue < 100){\r\n        tempTimeValue += 1200\r\n    }\r\n    \r\n    tempTimeValue = leadingZeroHandler(tempTimeValue)\r\n\r\n    return (tempTimeValue.slice(0,2) + \":\" + tempTimeValue.slice(2,4) + AMorPM)\r\n}\r\n\r\nconst regularToMilitaryHandler = (time) => {\r\n    let tempTimeValue = splittingTime(time)\r\n    let AMorPM = time.slice(5,7);\r\n\r\n    tempTimeValue = parseInt(tempTimeValue)\r\n\r\n    if((AMorPM === \"PM\" && tempTimeValue < 1200)){\r\n        tempTimeValue += 1200\r\n    }\r\n    else if ((AMorPM === \"AM\" && tempTimeValue >= 1200)){\r\n        tempTimeValue -= 1200\r\n    }\r\n    tempTimeValue = leadingZeroHandler(tempTimeValue)\r\n    \r\n    return tempTimeValue.slice(0,2) + \":\" + tempTimeValue.slice(2,4)\r\n}\r\n\r\n\r\nconst timeToNumberHelper = time => {\r\n    let retTime = null\r\n    if(state.timeSettings === \"Regular\"){\r\n        retTime = regularToMilitaryHandler(time)\r\n        retTime = splittingTime(retTime)\r\n        retTime = parseInt(retTime)\r\n    }\r\n    else{\r\n        retTime = time\r\n        retTime = splittingTime(retTime)\r\n        retTime = parseInt(retTime)\r\n    }\r\n    return retTime;\r\n}\r\n\r\nconst stdScorer = std => {\r\n    if(std < 1){\r\n        return 20\r\n    }\r\n    else if (std < 2){\r\n        return 10\r\n    }\r\n    else if (std < 3){\r\n        return 5\r\n    }\r\n    else{\r\n        return 0\r\n    }\r\n}\r\n\r\nconst average = scores => {\r\n    if(scores.length > 0){\r\n        \r\n        let totalScore = 0 \r\n        for(let i = 0; i < scores.length; i++){\r\n            totalScore += scores[i];\r\n        }\r\n        return totalScore/scores.length\r\n    }\r\n\r\n    else{\r\n        return 0\r\n    }\r\n}\r\n\r\nconst totalHoursHelper = (sleepTime, wakeTime) => {\r\n    let totalSleepHours = (sleepTime - wakeTime)/100;\r\n        \r\n        if(sleepTime >= wakeTime){\r\n            totalSleepHours = 24 - totalSleepHours\r\n        }\r\n        else{\r\n            totalSleepHours = totalSleepHours * -1\r\n        }\r\n\r\n        return totalSleepHours\r\n}\r\n\r\nconst sleepHoursTotalAvg = newTimes => {\r\n    let tempNewTimes = [...newTimes]\r\n    let scores = []\r\n    for (let i = 0; i <= 6; i++){\r\n        if(tempNewTimes[i].id === \"-1\"){\r\n            break\r\n        }\r\n        let tempSleepTimeValue = timeToNumberHelper(tempNewTimes[i].sleepTime)\r\n        let tempWakeTimeValue = timeToNumberHelper(tempNewTimes[i].wakeTime)\r\n\r\n        let totalSleepHours = totalHoursHelper(tempSleepTimeValue, tempWakeTimeValue)\r\n        if(totalSleepHours >= 7 && totalSleepHours <= 9){\r\n            scores.push(40)\r\n        }\r\n        else if ((totalSleepHours >= 5 && totalSleepHours < 7) || (totalSleepHours > 9 && totalSleepHours <= 11) ){\r\n            scores.push(20)\r\n        }\r\n        else if ((totalSleepHours >= 3 && totalSleepHours < 5) || (totalSleepHours > 11 && totalSleepHours <= 13) ){\r\n            scores.push(0)\r\n        }\r\n        else {\r\n            scores.push(-40)\r\n        }\r\n\r\n    }\r\n    \r\n    return average(scores)\r\n\r\n}\r\n\r\nconst sleepHoursConsistentAvg = newTimes => {\r\n    let tempNewTimes = [...newTimes]\r\n    let scores = []\r\n    let sleepTimes = []\r\n    let wakeTimes = []\r\n    for (let i = 0; i <= 6; i++){\r\n        if(tempNewTimes[i].id === \"-1\"){\r\n            break\r\n        }\r\n        let tempSleepTimeValue = timeToNumberHelper(tempNewTimes[i].sleepTime)\r\n        let tempWakeTimeValue = timeToNumberHelper(tempNewTimes[i].wakeTime)\r\n\r\n        sleepTimes.push(tempSleepTimeValue/100)\r\n        wakeTimes.push(tempWakeTimeValue/100)\r\n        scores.push(stdScorer(std(sleepTimes)) + stdScorer(std(wakeTimes)))\r\n    }\r\n    return average(scores)\r\n\r\n}\r\nconst sleepTimeAvg = newTimes => {\r\n    let tempNewTimes = [...newTimes]\r\n    let scores = []\r\n    let sleepHours = []\r\n    for (let i = 0; i <= 6; i++){\r\n        if(tempNewTimes[i].id === \"-1\"){\r\n            break\r\n        }\r\n        let tempSleepTimeValue = timeToNumberHelper(tempNewTimes[i].sleepTime)\r\n        let tempWakeTimeValue = timeToNumberHelper(tempNewTimes[i].wakeTime)\r\n\r\n        let totalSleepHours = totalHoursHelper(tempSleepTimeValue, tempWakeTimeValue)\r\n\r\n        sleepHours.push(totalSleepHours)\r\n        scores.push(stdScorer(std(sleepHours)))\r\n    }\r\n\r\n    return average(scores)\r\n\r\n}\r\n\r\nconst synchState = () => {\r\n\r\n}\r\n\r\nswitch(action.type){\r\n    case \"ADD\":\r\n        const newTimes = [...state.Times];\r\n\r\n        for (let i = 6; i >= 0; i--){\r\n            if(i === 0){\r\n                let sleepTime = action.value.sleepTime;\r\n                let wakeTime = action.value.wakeTime;\r\n                const id = action.id\r\n\r\n                if(state.timeSettings === \"Regular\"){\r\n                    const sleepAMorPM = action.value.button1;\r\n                    const wakeAMorPM = action.value.button2;\r\n                    sleepTime = sleepTime + sleepAMorPM;\r\n                    wakeTime = wakeTime + wakeAMorPM;\r\n                }\r\n                const totalHoursValue = totalHoursHelper(timeToNumberHelper(sleepTime), timeToNumberHelper(wakeTime)).toString()\r\n                \r\n                newTimes[0] = {id: id, sleepTime: sleepTime, wakeTime: wakeTime, totalHours: totalHoursValue}\r\n                \r\n            }\r\n            else{\r\n                newTimes[i] = {...newTimes[i-1]}\r\n            }\r\n        }\r\n\r\n        // console.log(sleepHoursTotalAvg(newTimes), sleepHoursConsistentAvg(newTimes), sleepTimeAvg(newTimes))\r\n        return {\r\n            ...state,\r\n            sleepScore: (sleepHoursTotalAvg(newTimes) + sleepHoursConsistentAvg(newTimes) + sleepTimeAvg(newTimes)).toFixed(2).toString(),\r\n            Times: newTimes\r\n        }\r\n    \r\n    case \"CHANGE_SETTINGS\":\r\n        if(action.timeOrDate === \"Date\"){\r\n            return {\r\n                ...state,\r\n                dateSettings: action.value\r\n            }\r\n        }\r\n        \r\n        if(action.timeOrDate === \"Time\"){\r\n\r\n            const newTimes = [...state.Times];\r\n\r\n            for (let i = 0; i <= 6; i++){\r\n                if(action.value === \"Regular\"){\r\n                    if(newTimes[i].id !== \"-1\"){\r\n                        newTimes[i] = {\r\n                            ...newTimes[i], \r\n                            sleepTime: militaryToRegularHandler(newTimes[i].sleepTime), \r\n                            wakeTime: militaryToRegularHandler(newTimes[i].wakeTime)}\r\n                    }\r\n                    else{\r\n                        break;\r\n                    }\r\n                }\r\n                else if(action.value === \"Military\"){\r\n                    if(newTimes[i].id !== \"-1\"){\r\n                        newTimes[i] = {\r\n                            ...newTimes[i], \r\n                            sleepTime: regularToMilitaryHandler(newTimes[i].sleepTime), \r\n                            wakeTime: regularToMilitaryHandler(newTimes[i].wakeTime)}\r\n                    }\r\n                    else{\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                Times: newTimes,\r\n                timeSettings: action.value\r\n            }\r\n        }\r\n    \r\n    // eslint-disable-next-line\r\n    case \"AUTH_FAIL\":\r\n        return {\r\n            ...state,\r\n            error: action.error.response.data.error\r\n        }\r\n\r\n    case \"AUTH_SUCCESS\":\r\n        return {\r\n            ...state, \r\n            token: action.response.data.idToken,\r\n            userId: action.response.data.localId,\r\n            error: null\r\n        }\r\n    case \"LOGOUT\":\r\n        return {\r\n            ...initialState\r\n        }\r\n    default:\r\n        return state\r\n}\r\n\r\n};\r\n\r\nexport default reducer;","C:\\Users\\PROX\\scheduler\\src\\components\\UI\\Backdrop\\Backdrop.js",[],"C:\\Users\\PROX\\scheduler\\src\\hoc\\Auxiliary\\Auxiliary.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\Header\\Header.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\Home\\Home.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\History\\History.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\About\\About.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\Settings\\Settings.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\CurrentTime\\CurrentTime.js",[],"C:\\Users\\PROX\\scheduler\\src\\containers\\Login\\Login.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":252,"column":7,"nodeType":"97","messageId":"98","endLine":252,"endColumn":17},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'synchState' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]